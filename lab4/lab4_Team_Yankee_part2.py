# -*- coding: utf-8 -*-
"""lab4_Team_Yankee.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iTdF5yvHBRMEttTB-x4Qr0dAtzdH554q
"""

from google.colab import files
uploaded = files.upload()

"""# Authenticate"""

import boto3
import pandas as pd
import copy
import string
import time
from nltk.tokenize import TweetTokenizer 

CREDENTIALS_FILE = 'credentials.csv'
credentials = pd.read_csv(CREDENTIALS_FILE).to_dict('records')[0]
aws_access_key_id = credentials['Access key ID']
aws_secret_access_key = credentials['Secret access key']

region_name = 'us-east-1'
endpoint_url = 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'

# Uncomment this line to use in production
# endpoint_url = 'https://mturk-requester.us-east-1.amazonaws.com'
 
client = boto3.client(
    'mturk',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    endpoint_url=endpoint_url,
    region_name=region_name
)

data = pd.read_csv('https://gist.githubusercontent.com/bshmueli/c99fc0abf56460e644bd610bf3024e83/raw/720285d133c85d94e0aa3fe3edcc199f6d99e3f7/lab4-data.csv')
idx = data['idx'].to_list()

hits_paginator = client.get_paginator('list_hits')
assignments_paginator = client.get_paginator('list_assignments_for_hit')

result = []
count = 0
break_set = 0
for hits in hits_paginator.paginate():
  if break_set == 1:
    break
  for hit in hits['HITs']:
    if count >= 377:
      break_set = 1
      break 
    count += 1
    time.sleep(0.5)
    for assignments in assignments_paginator.paginate(HITId=hit['HITId']):      
      for assignment in assignments['Assignments']:
          assignment['Answer'] = assignment['Answer'].replace('<?xml version="1.0" encoding="ASCII"?><QuestionFormAnswers xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2005-10-01/QuestionFormAnswers.xsd"><Answer><QuestionIdentifier>_charset_</QuestionIdentifier><FreeText>UTF-8</FreeText></Answer><Answer>', '')
          assignment['Answer'] = assignment['Answer'].replace('<QuestionIdentifier>', '')
          assignment['Answer'] = assignment['Answer'].replace('</QuestionIdentifier>', ' ')
          assignment['Answer'] = assignment['Answer'].replace('<FreeText>', '')
          assignment['Answer'] = assignment['Answer'].replace('</FreeText>', '')
          assignment['Answer'] = assignment['Answer'].replace('</Answer><Answer>', ' ')
          assignment['Answer'] = assignment['Answer'].replace('</Answer></QuestionFormAnswers>', '')
          result.append([hit['Question'].split('/')[8].split('.')[0], assignment['Answer']])

output = pd.DataFrame(columns = ['idx', 'avg_valence', 'avg_arousal', 'avg_dominance', 'avg_time', 'assignments'])
for i in range(377):
  total_valence = 0
  total_arousal = 0
  total_dominance = 0
  total_time = 0
  assignments = 0
  avg_valence = 0
  avg_arousal = 0
  avg_dominance = 0
  avg_time = 0
  for data in result:
    if data[0] == str(i):
      total_valence += int(data[1].split(' ')[1])
      total_arousal += int(data[1].split(' ')[3])
      total_dominance += int(data[1].split(' ')[5])
      total_time += int(data[1].split(' ')[7])
      assignments += 1
  if assignments != 0:
    avg_valence = total_valence / assignments
    avg_arousal = total_arousal / assignments
    avg_dominance = total_dominance / assignments
    avg_time = total_time / 1000 / assignments
  tmp = pd.DataFrame({'idx' : idx[i], 'avg_valence' : [avg_valence], 'avg_arousal' : [avg_arousal], 'avg_dominance' : [avg_dominance], 'avg_time' : [avg_time], 'assignments' : [assignments]})
  output = output.append(tmp, ignore_index = True)

output.to_csv('results.csv', index=False)

