# -*- coding: utf-8 -*-
"""lab4-Team-Yankee.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SL92SeZ0Q41eHXjLfFTD8e8vjUidV-YD
"""

from google.colab import files
uploaded = files.upload()

"""# Authenticate"""

import boto3
import pandas as pd
import copy
from nltk.tokenize import TweetTokenizer 

CREDENTIALS_FILE = 'credentials.csv'
credentials = pd.read_csv(CREDENTIALS_FILE).to_dict('records')[0]
aws_access_key_id = credentials['Access key ID']
aws_secret_access_key = credentials['Secret access key']

region_name = 'us-east-1'
endpoint_url = 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'

# Uncomment this line to use in production
# endpoint_url = 'https://mturk-requester.us-east-1.amazonaws.com'
 
client = boto3.client(
    'mturk',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    endpoint_url=endpoint_url,
    region_name=region_name
)

"""#Get  Balance"""

print(client.get_account_balance())

"""#Create HIT Type"""

one_minute = 60 # seconds
one_hour = 60 * one_minute
one_day = 24 * one_hour

hit_type_response_short = client.create_hit_type(
    AutoApprovalDelayInSeconds=one_hour,
    AssignmentDurationInSeconds=30 * one_minute,
    Reward='0.50',
    Title='Select emotion rating',
    Keywords='language, tweet, nctu',
    Description='Choose the best-fit emotion ratings to the following Tweet.',
    QualificationRequirements=[
        {
            'QualificationTypeId': '00000000000000000071', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'In',
            'LocaleValues': [
                {
                    'Country': 'TW'
                },
                {
                    'Country': 'US'
                },
            ],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
        {
            'QualificationTypeId': '00000000000000000060', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'EqualTo',
            'IntegerValues': [1],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        }
    ]
)

hit_type_response_long = client.create_hit_type(
    AutoApprovalDelayInSeconds=one_hour,
    AssignmentDurationInSeconds=30 * one_minute,
    Reward='1.00',
    Title='Select emotion rating',
    Keywords='language, tweet, nctu',
    Description='Choose the best-fit emotion ratings to the following Tweet.',
    QualificationRequirements=[
        {
            'QualificationTypeId': '00000000000000000071', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'In',
            'LocaleValues': [
                {
                    'Country': 'TW'
                },
                {
                    'Country': 'US'
                },
            ],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
        {
            'QualificationTypeId': '00000000000000000060', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'EqualTo',
            'IntegerValues': [1],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        }
    ]
)

hit_type_id_long = hit_type_response_long['HITTypeId']
hit_type_id_short = hit_type_response_short['HITTypeId']

data = pd.read_csv('https://gist.githubusercontent.com/bshmueli/c99fc0abf56460e644bd610bf3024e83/raw/720285d133c85d94e0aa3fe3edcc199f6d99e3f7/lab4-data.csv')
text = data['text'].to_list()
tokens = []
total_len = 0

for text_data in text:
  total_len += len(TweetTokenizer().tokenize(text_data))
  tokens.append(TweetTokenizer().tokenize(text_data))
avg_len = total_len / len(data)

url_str = '''<?xml version="1.0" encoding="UTF-8"?>
<ExternalQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd">
  <ExternalURL>https://tweetemotion_tommytyc.imfast.io/form.html</ExternalURL>
  <FrameHeight>800</FrameHeight>
</ExternalQuestion>'''

question_list_short = []
question_list_long = []
for i in range(377):
    tmp_url = copy.deepcopy(url_str)
    new_html = str(i) + '.html'
    if len(tokens[i]) > avg_len:
      question_list_long.append(tmp_url.replace('form.html', new_html))
    elif len(tokens[i]) < avg_len:
      question_list_short.append(tmp_url.replace('form.html', new_html))

"""æ”¹ lifetimeinseconds -> 8X7Xone_day"""

response_list_short = []
response_list_long = []
for i in range(len(question_list_short)):
    tmp_response = client.create_hit_with_hit_type(
        HITTypeId=hit_type_id_short,
        MaxAssignments=3,
        LifetimeInSeconds=8 * 7 * one_day,
        Question=question_list_short[i],
        RequesterAnnotation=str(str(i) + '-tweet'),
    )
    response_list_short.append(tmp_response)
for i in range(len(question_list_long)):
    tmp_response = client.create_hit_with_hit_type(
        HITTypeId=hit_type_id_long,
        MaxAssignments=3,
        LifetimeInSeconds=8 * 7 * one_day,
        Question=question_list_long[i],
        RequesterAnnotation=str(str(i) + '-tweet'),
    )
    response_list_long.append(tmp_response)

# list_hits_response = client.list_hits()
# hit_id = list_hits_response['HITs'][1]['HITId']
# response = client.list_assignments_for_hit(HITId=hit_id)
# # response['Assignments'][0]['Answer']
# response

hits_paginator = client.get_paginator('list_hits')
assignments_paginator = client.get_paginator('list_assignments_for_hit')

for hits in hits_paginator.paginate():
    for hit in hits['HITs']:
        for assignments in assignments_paginator.paginate(HITId=hit['HITId']):
            for assignment in assignments['Assignments']:
                print(assignment['Answer'])